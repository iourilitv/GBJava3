package lesson5.classbook;

import java.util.concurrent.Semaphore;

/**
 * GBJava3
 * Java Core. Professional level. 19.08.2019 Webinar. Teacher: Anton Batiaev
 * Урок 5. Многопоточность. Часть II.
 * Классы для работы с многопоточностью. Concurrent collections.
 * Разбор практических примеров.
 * Классы синхронизации. Semaphore.
 * Задача: проезд в туннель с ограниченной пропускной способностью.
 * Semaphore ограничивает количество потоков при работе с ресурсами. Для этого служит счетчик.
 * Если его значение больше нуля, то потоку разрешается доступ, а значение уменьшается. Если
 * счетчик равен нулю, то текущий поток блокируется до освобождения ресурса.
 * Для получения доступа используется метод acquire(), для освобождения – release().
 * С помощью метода acquire() одновременно захватить семафор могут только два потока. Остальные
 * становятся в очередь, пока один из «захватчиков» не освободит семафор методом release() .
 */
public class SemaphoreDemo {
    public static void main (String[] args) {
        //создаем объект семафор с заданным лимитом доступа в параметре
        Semaphore smp = new Semaphore( 2 );
        for ( int i = 0 ; i < 5 ; i++) {
            final int w = i;
            //запускаем поток
            new Thread(() -> {
                try {
                    System.out.println( "Поток " + w + " перед семафором" );
                    //поток запрашивает у семафора право на ресурс и ждем пока не дано право прохода
                    smp.acquire();
                    //получаем доступ к ресурсу(счетчик семафора -1)
                    System.out.println( "Поток " + w + " получил доступ к ресурсу" );
                    Thread.sleep( 500 );
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    System.out.println( "Поток " + w + " освободил ресурс" );
                    //освобождаем ресурс(счетчик семафора +1)
                    smp.release();
                }
            }).start();
        }
    }
}

//Result.
//Поток 1 перед семафором
//Поток 0 перед семафором
//Поток 1 получил доступ к ресурсу
//Поток 2 перед семафором
//Поток 0 получил доступ к ресурсу
//Поток 3 перед семафором
//Поток 4 перед семафором
//Поток 0 освободил ресурс
//Поток 2 получил доступ к ресурсу
//Поток 1 освободил ресурс
//Поток 3 получил доступ к ресурсу
//Поток 2 освободил ресурс
//Поток 4 получил доступ к ресурсу
//Поток 3 освободил ресурс
//Поток 4 освободил ресурс
